$o-assets-global-path: '/bower_components/' !default;

$o-assets-paths-map: ();


// Deprecated - remove in v2
@function oAssetsUse ($asset, $module, $version) {

    @warn "`oAssetsUse` is deprecated. Use `oAssetsResolve` instead. You should also remove `$o-#{$module}-version` and `$o-#{$module}-assets-path` from your module";

    $full-path: $asset;

    @if ($module and str-index($module, 'o-') == 0 and str-index($module, '/') == null and $version == null) {
        // looks like the module's used the old syntax but the product hasn't overridden the default paths
        // using variables, so we should use the new method of checking o-assets-paths-map
       @return oAssetsResolve ($asset, $module);

    } @else if ($module) {
        @if ($version) {
            $full-path: $module + '@' + $version + '/' + $full-path;
        } @else {
             $full-path: $module + '/' + $full-path;
        }
    }

    @if ($o-assets-global-path) {
    	$full-path: $o-assets-global-path + $full-path;
    }

    @return #{$full-path};
}

@function oAssetsResolve ($asset, $module) {

    $full-path: $asset;

    @if (map-has-key($o-assets-paths-map, $module)) {
        $module-path: map-get($o-assets-paths-map, $module);

        // allows putting assets in single directory shared by all modules
        @if ($module-path and str-length($module-path) > 0 ) {
            $full-path: $module-path + '/' + $full-path;
        }
    } @else {
        // defaults to use module name
        $full-path: $module + '/' + $full-path;
    }

    @if ($o-assets-global-path) {
        $full-path: $o-assets-global-path + $full-path;
    }

    @return #{$full-path};
}

@function oAssetsSetModulePaths ($path-map) {
    $o-assets-paths-map: map-merge($o-assets-paths-map, $path-map);
}
